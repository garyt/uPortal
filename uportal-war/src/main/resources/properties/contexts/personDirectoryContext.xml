<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License. You may obtain a
    copy of the License at:

    http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on
    an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.

-->

<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans" 
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd">
    
    <!-- ********** User Information Support Beans ********** -->
    <!--
     | Provides user name for the current portal user if the thread is handling a request
     +-->
    <bean id="currentUserProvider" class="org.jasig.portal.persondir.support.PersonManagerCurrentUserProvider" />
    
    <!--
     | Provides the default username attribute to use to the rest of the DAOs
     +-->
    <bean id="usernameAttributeProvider" class="org.jasig.services.persondir.support.SimpleUsernameAttributeProvider">
        <property name="usernameAttribute" value="username" />
    </bean>
    
    
    
    <!-- ********** Overwriting attribute beans for Attribute Swapper ********** -->
    <!-- 
     | Overrides DAO acts as the root, it handles incorporating attributes from the attribute swapper utility, wraps
     | the caching DAO
     +-->
    <bean id="personAttributeDao" class="org.jasig.portal.portlets.swapper.OverwritingPersonAttributeDao">
        <qualifier value="personAttributeDao"/>
        <property name="delegatePersonAttributeDao" ref="requestAttributeMergingDao" />
        <property name="attributeOverridesMap" ref="sessionAttributesOverridesMap" />
    </bean>
    
    <!--
     | Store attribute overrides in a session scoped map to ensure overrides don't show up for
     | other users and swapped attributes will be cleaned up on user logout.
     +-->
    <bean id="sessionAttributesOverridesMap" class="java.util.concurrent.ConcurrentHashMap" scope="globalSession">
        <aop:scoped-proxy />
    </bean>



    <!-- ********** Beans for Attributes from the HttpServletRequest **********-->
    <!--
     | Merges attributes from the request with those from other DAOs
     +-->
    <bean id="requestAttributeMergingDao"
        class="org.jasig.services.persondir.support.MergingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="merger">
            <bean
                class="org.jasig.services.persondir.support.merger.ReplacingAttributeAdder" />
        </property>
        <property name="personAttributeDaos">
            <list>
                <ref bean="requestAttributesDao" />
                <ref bean="mergedPersonAttributeDao" />
            </list>
        </property>
    </bean>

    <!--
     | Servlet filter that creates an attribute for the serverName
     +
    -->
    <bean id="requestAttributeSourceFilter"
        class="org.jasig.services.persondir.support.web.RequestAttributeSourceFilter">
        <property name="additionalDescriptors" ref="requestAdditionalDescriptors" />
        <property name="usernameAttribute" value="remoteUser" />
        <property name="remoteUserAttribute" value="remoteUser" />
        <property name="serverNameAttribute" value="serverName" />
        <property name="processingPosition" value="BOTH" />
    </bean>

    <!--
     | Session-scoped descriptors object. One of these will exist for each user in their session. It will store the
     | attributes from the request set by the requestAttributeSourceFilter
     +-->
    <bean id="requestAdditionalDescriptors" class="org.jasig.services.persondir.support.MediatingAdditionalDescriptors">
        <property name="delegateDescriptors">
            <list>
                <bean class="org.jasig.services.persondir.support.AdditionalDescriptors" scope="globalSession">
                    <aop:scoped-proxy />
                </bean>
                <bean class="org.jasig.services.persondir.support.AdditionalDescriptors" scope="request">
                    <aop:scoped-proxy />
                </bean>
            </list>
        </property>
    </bean>

    <util:set id="username-logical-attributes">
        <value>username</value>
        <value>uid</value>
        <value>username</value>
        <value>user.login.id</value>
        <value>schoolId</value>
    </util:set>

    <bean abstract="true" id="usernameCanonicalizing">
        <property name="usernameCaseCanonicalizationMode" value="LOWER" />
    </bean>

    <bean abstract="true" parent="usernameCanonicalizing" id="logicalAttributeCanonicalizing">
        <property name="caseInsensitiveResultAttributesAsCollection" ref="username-logical-attributes" />
        <property name="caseInsensitiveQueryAttributesAsCollection" ref="username-logical-attributes" />
    </bean>

    <!--
     | The person attributes DAO that returns the attributes from the request. Uses a currentUserProvider since the
     | username may not always be provided by the request object.
     +-->
    <bean id="requestAttributesDao"
          parent="usernameCanonicalizing"
        class="org.jasig.services.persondir.support.AdditionalDescriptorsPersonAttributeDao">
        <property name="descriptors" ref="requestAdditionalDescriptors" />
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="currentUserProvider" ref="currentUserProvider" />
    </bean>



    <!-- ********** Data source attribute DAOs **********-->
    <!--
     | Merging DAOs that define the order that the data providing DAOs are called, results are cached by the outer
     | caching DAO 
     +-->
    <bean id="mergedPersonAttributeDao"
		class="org.jasig.services.persondir.support.CachingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="cacheNullResults" value="true" />
        <property name="userInfoCache">
            <bean class="org.jasig.portal.utils.cache.MapCacheFactoryBean">
                <property name="cacheFactory" ref="cacheFactory" />
                <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.merged" />
            </bean>
        </property>
        <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
        <property name="cachedPersonAttributesDao" >
            <bean id="mergedPersonAttributeDao" class="org.jasig.services.persondir.support.MergingPersonAttributeDaoImpl">
                <property name="merger">
                    <!-- This is a "first one wins" strategy. I.e. the first value found for
                    any given result attrbute will be assigned to the user. Different values
                    found in subsequently queried attribute sources will be ignored. Suitable
                    if uP-local attributes should always take precedency. Other
                    options (all in the same package):

                        MultivaluedAttributeMerger - Collects values from all DAOs into lists (does not
                          filter out duplicate values, though)
                        ReplacingAttributeAdder - "Last one wins" strategy. I.e. the opposite of
                          NoncollidingAttributeAdder.
                    -->
                    <bean class="org.jasig.services.persondir.support.merger.NoncollidingAttributeAdder" />
                </property>
                <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                <property name="personAttributeDaos">
                    <list>
                        <bean class="org.jasig.services.persondir.support.CascadingPersonAttributeDao">
                            <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                            <property name="personAttributeDaos">
                                <list>
                                    <ref bean="uPortalAccountUserSource" />
                                    <ref bean="uPortalJdbcUserSource" />
                                </list>
                            </property>
                        </bean>
                        <!--


                        ## Where Do I Put My Deployment-Specific Attriubute Sources? ##

                        Define them as standalone, top-level beans below, and refer to them here
                        with elements like:

                            <bean ref="myAttributeSourceId" />

                        Don't add more sources to the CascadingPersonAttributeDao.personAttributeDaos
                        list above unless you're adding "special" DAOs tasked with augmenting/transforming
                        the attributes generated by uP-local DAOs. (CascadingPersonAttributeDao takes
                        the results from the first-DAO, transforms them into a query, and passes that
                        query to each subsequent DAO. I.e. subsequent DAOs in the cascade list will
                        *not* be given a chance to process the original query. But they will if you add
                        them directly to the MergingPersonAttributeDaoImpl.personAttributeDaos list here.)

                        For more background see https://issues.jasig.org/browse/SSP-1738

                        ## How Do I Control Which Attributes Will Be Case-In/Sensitive ##

                        At a minimum you often want username attributes to be treated case-insensitively
                        *and* to be returned to the application in a canonicalized casing. To do that
                        you typically define three beans:

                            1) A set of all logical (i.e. app-facing) attributes which are considered
                            username attributes, e.g.:

                                <util:set id="username-logical-attributes">
                                    <value>username</value>
                                    <value>uid</value>
                                    <value>username</value>
                                    <value>user.login.id</value>
                                    <value>schoolId</value>
                                </util:set>

                            Only include schoolId in this set if your schoolIds and usernames are
                            identical (which is the default assumption in the OOTB uP DAO).

                            2) A base bean defining the username case canonicalization mode (usually
                            UPPER or LOWER), e.g.:

                                <bean abstract="true" id="usernameCanonicalizing">
                                    <property name="usernameCaseCanonicalizationMode" value="LOWER" />
                                </bean>

                            3) A base bean that inherits the canonicalization casing mode, specifies
                            that this mode should be used when mapping usernames out of an attribute
                            source, and specifies that queries on any username attribute should be
                            case-insensitive, e.g.:

                                <bean abstract="true" parent="usernameCanonicalizing" id="logicalAttributeCanonicalizing">
                                    <property name="caseInsensitiveResultAttributesAsCollection" ref="username-logical-attributes" />
                                    <property name="caseInsensitiveQueryAttributesAsCollection" ref="username-logical-attributes" />
                                </bean>

                        Then specify "logicalAttributeCanonicalizing" as the parent bean of:

                          - uPortalAccountUserSource
                          - The concrete SingleRowJdbcPersonAttributeDao nested inside uPortalJdbcUserSource
                          - Your deployment-specific DAOs

                        E.g.:

                            <bean id="myAttributeSourceId"
                                    parent="logicalAttributeCanonicalizing"
                                    class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">

                                ...snip...

                            </bean>

                        If your up_user table already has non-canoncially cased usernames you'll also
                        need to set this in the concrete SingleRowJdbcPersonAttributeDao nested inside
                        uPortalJdbcUserSource:

                            <property name="caseInsensitiveDataAttributesAsCollection">
                                <set>
                                    <value>USER_NAME</value>
                                </set>
                            </property>

                        If you have other attributes which should be treated case-insensitively, create
                        a merged set between the username-logical-attributes bean and a set containing
                        those other attributes, e.g.:

                            <bean id="case-insensitive-query-attributes" parent="username-logical-attributes"
                                    class="org.springframework.beans.factory.config.SetFactoryBean">
                                <property name="sourceSet">
                                    <set merge="true">
                                        <value>sn</value>
                                        <value>lastName</value>
                                    </set>
                                </property>
                            </bean>

                        Then reference that bean instead of username-logical-attributes from
                        logicalAttributeCanonicalizing for either or both of the
                        caseInsensitiveResultAttributesAsCollection (for canonicalization on mapping out of
                        the DAOs) and caseInsensitiveQueryAttributesAsCollection properties (for
                        canonicalization on mapping into the DAOs via queries).

                        Note that if your underlying data layer is case-sensitive and you're storing non-
                        canonical values in it, you'll need to explicitly list out such *physical* attributes
                        in your DAOs using the caseInsensitiveDataAttributesAsCollection property as
                        shown above. Note that this typically has a negative performance impact unless your
                        data layer supports (and is configured with) function-based indexes.

                        Finally, note that for historical reasons, the uP-local attribute source treats all
                        non-username attributes case-insensitively in *queries*, regardless of how
                        caseInsensitiveQueryAttributesAsCollection is configured. But the uP-local attribute
                        source *will* honor your caseInsensitiveResultAttributesAsCollection configuration
                        if you also want to canonicalize those physical attributes when mapping them to
                        logical attributes.

                        For more background see https://issues.jasig.org/browse/SSP-1668.


                        ## How Do I Control Which Attribute Searches Will Be Wildcarded? ##

                        For useful "simple" user search behavior across uP-local and other JDBC and/or LDAP
                        DAOs, strongly consider adding this configuration to each of the latter:

                          <property name="queryType" value="OR" />

                        For consistent search wildcarding with historical (but no longer default) uP-local search
                        behavior, you also have the option of setting:

                          <property name="wildcardDataAttributes" value="true" />

                        **Be very careful when setting that configuration to "true", though, because it will result
                        in all non-username search terms being wrapped in wildcards, which can have a
                        significantly negative performance impact. In most cases it should be set to "false".**

                        If you do need automatic wildcarding, but wish to exclude certain non-username attributes
                        from that behavior (which you almost always want to do if you derive SSP group memberships from
                        a multi-valued LDAP attribute:

                            <property name="wildcardedDataAttributeExclusions">
                                <set>
                                    <value>YOUR_ROLE_ATTRIBUTE_NAME</value>
                                </set>
                            </property>

                        YOUR_ROLE_ATTRIBUTE_NAME from that example should be replaced with the physical
                        LDAP attribute name, not the logical name by which that attribute is known
                        to the application.

                        The default JDBC/LDAP username search behavior respects wildcards embedded in
                        username search terms (but will never automatically add other wildcards). To ignore
                        embedded username search term wildcards set:

                          <property name="allowUsernameWildcards" value="false" />

                        Note that setting that config does not strip embedded wildcards. It just causes the
                        LDAP search to treat them literally.

                        For both JDBC and LDAP DAOs, you will also likely need to explicitly configure the name physical
                        attribute which represents a username:

                            <property name="usernameDataAttribute" value="YOUR_USERNAME_ATTRIBUTE_NAME" />

                        Doing so is unecessary if your physical and logical username attributes have
                        the same name.

                        For more background see https://issues.jasig.org/browse/SSP-1669 and
                        https://issues.jasig.org/browse/SSP-2359.

                        -->
                    </list>
                </property>
            </bean>
        </property>
    </bean>

    <!--
     | Looks in the local person-directory data. This is only used for portal-local users such as fragment owners
     | All attributes are searchable via this configuration, results are cached by the underlying DAO
     +-->
    <bean id="uPortalAccountUserSource"
          parent="logicalAttributeCanonicalizing"
          class="org.jasig.portal.persondir.LocalAccountPersonAttributeDao">
        <property name="localAccountDao" ref="localAccountDao"/>
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="queryAttributeMapping">
            <map>
                <entry key="username" value="username" />
                <entry key="schoolId" value="username" />
                <entry key="givenName" value="givenName" />
                <entry key="sn" value="sn"/>
            </map>
        </property>
        <property name="resultAttributeMapping">
            <map>
                <entry key="username">
                    <set>
                        <value>uid</value>
                        <value>user.login.id</value>
                        <value>schoolId</value>
                    </set>
                </entry>
                <entry key="givenName">
                    <set>
                        <value>firstName</value>
                    </set>
                </entry>
                <entry key="sn">
                    <set>
                        <value>lastName</value>
                    </set>
                </entry>
                <entry key="mail">
                    <set>
                        <value>primaryEmailAddress</value>
                    </set>
                </entry>
            </map>
        </property>
    </bean>
    
    <!--
     | Looks in the base UP_USER table, doesn't find attributes but will ensure a result if it the user exists in the
     | portal database and is searched for by username, results are cached by the outer caching DAO
     +-->
    <bean id="uPortalJdbcUserSource"
        class="org.jasig.services.persondir.support.CachingPersonAttributeDaoImpl">
        <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
        <property name="cacheNullResults" value="true" />
        <property name="userInfoCache">
            <bean class="org.jasig.portal.utils.cache.MapCacheFactoryBean">
                <property name="cacheFactory" ref="cacheFactory" />
                <property name="cacheName" value="org.jasig.services.persondir.USER_INFO.up_user" />
            </bean>
        </property>
        <property name="cacheKeyGenerator" ref="userAttributeCacheKeyGenerator" />
        <property name="cachedPersonAttributesDao" >
            <bean parent="logicalAttributeCanonicalizing"
                  class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">
                <constructor-arg index="0" ref="PersonDB" />
                <constructor-arg>
                    <value> 
                        SELECT USER_NAME
                        FROM UP_USER
                        WHERE {0}
                    </value>
                </constructor-arg>
                <property name="usernameAttributeProvider" ref="usernameAttributeProvider" />
                <property name="usernameDataAttribute" value="USER_NAME" />
                <property name="queryAttributeMapping">
                    <map>
                        <entry key="username" value="USER_NAME" />
                    </map>
                </property>
                <!-- Only need caseInsensitiveDataAttributesAsCollection if the
                underlying data is non-canonically cased -->
                <property name="caseInsensitiveDataAttributesAsCollection">
                    <set>
                        <value>USER_NAME</value>
                    </set>
                </property>
                <property name="resultAttributeMapping">
                    <map>
                        <entry key="USER_NAME">
                            <set>
                                <value>uid</value>
                                <value>username</value>
                                <value>user.login.id</value>
                            </set>
                        </entry>
                    </map>
                </property>
            </bean>
        </property>
    </bean>
    
    <!-- Where non-local attribute DAOs go -->
    
    <bean id="userAttributeCacheKeyGenerator" class="org.jasig.portal.utils.cache.PersonDirectoryCacheKeyGenerator">
        <property name="ignoreEmptyAttributes" value="true" />
    </bean>
</beans>
